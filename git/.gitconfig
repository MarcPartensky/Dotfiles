[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[user]
	name = Marc Partensky
	email = marc.partensky@gmail.com
    # signingkey = 2A12B6587504372C # subkey
    signingkey = 516EAE18A5512CE9
[core]
	excludesfile = ~/.gitignore_global
	editor = nvim
	pager = bat
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path =
[mergetool "sourcetree"]
	cmd = /Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[commit]
	template = ~/.stCommitMsg
    gpgsign = true
[pull]
	rebase = true
[init]
	defaultBranch = master
[alias]
	globalconf = "!nvim ~/.gitconfig"
	conf = "!nvim .git/config"
	pushall = "!git remote | xargs -L1 git push --all"
	pullall = "!git remote | xargs -L1 git pull"
    rpull = "pull --recurse-submodules"
	browse = "!gh repo view --web"
	refresh = "!gitrefresh"
	register = "!gitregister"
	unregister = "!gitunregister"
	record = "!gitrecord"
	update = "!gitupdate"
    commit-count = "rev-list HEAD --count"
    most-commits = "shortlog -s"
    toplevel = "rev-parse --show-toplevel"
    resign = "!_() { : git checkout ; [ \"$#\" -eq 0 ] && echo 'Usage: resign <rev-list>' && exit 2; \
                   git filter-branch --commit-filter ' \
        if [ \"$GMAIL\" = \"your@address.com\" ]; then git commit-tree -S \"$@\"; else git commit-tree \"$@\"; fi' $1; }; _"
    track = "!for b in `git branch -r | grep -v -- '->'`; do git branch --track ${b##origin/} $b; done"
    ; track = "!git branch -r | grep -v '\->' | while read remote; do git branch --track \"${remote#origin/}\" \"$remote\"; done"
    delim     = ^
    mtree = log --all --graph --decorate=short --color --format=format:'%C(bold cyan)%h%C(reset) %C(auto)%d%C(reset)\n %C(auto,green)[%cr]%C(reset)  %x09%C(white)%an: %s %C(reset)'
    lt = log --all --graph --decorate=short --color --format=format:'%C(bold yellow)%h%C(reset)+%C(auto, cyan)%cr%C(reset)+%C(auto)%d%C(reset)+%C(auto,green)%an%C(reset)%C(white): %s%C(reset)'
    stree = !bash -c '"                                                                             \
        while IFS=+ read -r hash time branch message; do                                            \
            timelength=$(echo \"$time\" | sed -r \"s:[^ ][[]([0-9]{1,2}(;[0-9]{1,2})?)?m::g\");     \
            timelength=$(echo \"16+${#time}-${#timelength}\" | bc);                                 \
            printf \"%${timelength}s    %s %s %s\n\" \"$time\" \"$hash\" \"$branch\" \"\";          \
        done < <(git lt && echo);"'
    vtree = !bash -c '"                                                                             \
        while IFS=+ read -r hash time branch message; do                                            \
            timelength=$(echo \"$time\" | sed -r \"s:[^ ][[]([0-9]{1,2}(;[0-9]{1,2})?)?m::g\");     \
            timelength=$(echo \"16+${#time}-${#timelength}\" | bc);                                 \
            printf \"%${timelength}s    %s %s %s\n\" \"$time\" \"$hash\" \"$branch\" \"$message\";  \
        done < <(git lt && echo);"'
    count-log = log --all --graph --pretty=format:' '
    tably-log = log --all --graph --decorate=short --color --pretty=format:'+%C(bold 214)%<(7,trunc)%h%C(reset)+%C(dim white)%>(12,trunc)%cr%C(reset)+%C(auto)%>(15,trunc)%D%C(reset)+%C(white)%s%C(reset)'
    tably     = !bash -c '"                                                                                                    \
                  while IFS=+ read -r graph;do                                                                                 \
                    chars_count=$(sed -nl1000 \"l\" <<< \"$graph\" | grep -Eo \"\\\\\\\\\\\\\\\\|\\||\\/|\\ |\\*|_\" | wc -l); \
                    [[ $chars_count -gt ${max_chars:-0} ]] && max_chars=$chars_count;                                          \
                  done < <(git count-log && echo);                                                                             \
                  while IFS=+ read -r graph hash time branch message;do                                                        \
                    chars=$(sed -nl1000 \"l\" <<< \"$graph\" | grep -Eo \"\\\\\\\\\\\\\\\\|\\||\\/|\\ |\\*|_\" | wc -l);       \
                    whitespaces=$(($max_chars-$chars));                                                                        \
                    whitespaces=$(seq -s\" \" $whitespaces|tr -d \"[:digit:]\");                                               \
                    graph_all=\"$graph_all$graph$whitespaces\n\";                                                              \
                    hash_all=\"$hash_all$(printf \"%7s\" \"$hash\")  \n\";                                                     \
                    time_all=\"$time_all$(printf \"%12s\" \"$time\") \n\";                                                     \
                    branch_all=\"$branch_all$(printf \"%15s\" \"$branch\")\n\";                                                \
                    message_all=\"$message_all$message\n\";                                                                    \
                  done < <(git tably-log && echo);                                                                             \
                  paste -d\" \" <(echo -e \"$time_all\") <(echo -e \"$branch_all\") <(echo -e \"$graph_all\")                  \
                                <(echo -e \"$hash_all\") <(echo -e \"$message_all\");                                          \
                '"

    last   = log --all --decorate=short --color --pretty=format:' %C(dim white)%>(12,trunc)%cr%C(reset) %C(bold 214)%<(7,trunc)%h%C(reset)' -20
    tree    = log --all --graph --decorate=short --color --pretty=format:'%C(bold 214)%<(7,trunc)%h%C(reset)^%C(dim white)%>(12,trunc)%cr%C(reset)^%C(auto)%>(25,trunc)%D%C(reset)^%C(white)%<(25,trunc)%s%C(reset)^%an'
    tree-col= 3
    position    = log --all --graph --decorate=short --color --pretty=format:'^%C(dim white)%>(12,trunc)%cr%C(reset)^%C(cyan)%<(10,trunc)%cs%C(reset)^%C(bold 214)%<(7,trunc)%h%C(reset)^%C(auto)%<(15,trunc)%D%C(reset)^%C(white)%s%C(reset)'
    position-col= 4

    graph     = !bash -c '" \
                \
                \
                declare -A col_length; \
                apost=$(echo -e \"\\u0027\"); \
                delim=$(git config alias.delim); \
                git_log_cmd=$(git config alias.$1); \
                git_tre_col=${2:-$(git config alias.$1-col)}; \
                [[ -z "$git_tre_col" ]] && git_tre_col=1; \
                [[ -z "$git_log_cmd" ]] && { git $1;exit; }; \
                \
                \
                i=0; \
                n=0; \
                while IFS= read -r line;do \
                  ((n++)); \
                  while read -d\"$delim\" -r col_info;do \
                    ((i++)); \
                    [[ -z \"$col_info\" ]] && col_length[\"$n:$i\"]=${col_length[\"${last[$i]:-1}:$i\"]} && ((i--)) && continue; \
                    [[ $i -gt ${i_max:-0} ]] && i_max=$i; \
                    col_length[\"$n:$i\"]=$(grep -Eo \"\\([0-9]*,[lm]*trunc\\)\" <<< \"$col_info\" | grep -Eo \"[0-9]*\" | head -n 1); \
                    [[ -n \"${col_length[\"$n:$i\"]}\" ]] && last[$i]=$n; \
                    chars_extra=$(grep -Eo \"trunc\\).*\" <<< \"$col_info\"); \
                    chars_extra=${chars_extra#trunc)}; \
                    chars_begin=${chars_extra%%\\%*}; \
                    chars_extra=${chars_extra%$apost*}; \
                    chars_extra=${chars_extra#*\\%}; \
                    case \" ad aD ae aE ai aI al aL an aN ar as at b B cd cD ce cE ci cI cl cL cn cN cr \
                            cs ct d D e f G? gd gD ge gE GF GG GK gn gN GP gs GS GT h H N p P s S t T \" in \
                      *\" ${chars_extra:0:2} \"*) \
                        chars_extra=${chars_extra:2}; \
                        chars_after=${chars_extra%%\\%*}; \
                        ;; \
                      *\" ${chars_extra:0:1} \"*) \
                        chars_extra=${chars_extra:1}; \
                        chars_after=${chars_extra%%\\%*}; \
                        ;; \
                      *) \
                        echo \"No Placeholder found. Probably no tablelike output.\"; \
                        continue; \
                        ;; \
                    esac; \
                    if [[ -n \"$chars_begin$chars_after\" ]];then \
                      len_extra=$(echo \"$chars_begin$chars_after\" | wc -m); \
                      col_length["$n:$i"]=$((${col_length["$n:$i"]}+$len_extra-1)); \
                    fi; \
                  done <<< \"${line#*=format:}$delim\"; \
                  i=1; \
                done <<< \"$(echo -e \"${git_log_cmd//\\%n/\\\\n}\")\"; \
                \
                \
                git_log_fst_part=\"${git_log_cmd%%\"$apost\"*}\"; \
                git_log_lst_part=\"${git_log_cmd##*\"$apost\"}\"; \
                git_log_tre_part=\"${git_log_cmd%%\"$delim\"*}\"; \
                git_log_tre_part=\"${git_log_tre_part##*\"$apost\"}\"; \
                git_log_cmd_count=\"$git_log_fst_part$apost $git_log_tre_part$apost$git_log_lst_part\"; \
                col_length[\"1:1\"]=$(eval git \"${git_log_cmd_count// --color}\" | wc -L); \
                \
                \
                i=0; \
                while IFS=\"$delim\" read -r graph rest;do \
                  ((i++)); \
                  graph_line[$i]=\"$graph\"; \
                done < <(eval git \"${git_log_cmd/ --color}\" && echo); \
                \
                \
                i=0; \
                l=0; \
                while IFS= read -r line;do \
                  c=0; \
                  ((i++)); \
                  ((l++)); \
                  [[ $l -gt $n ]] && l=1; \
                  while IFS= read -d\"$delim\" -r col_content;do \
                    ((c++)); \
                    [[ $c -le $git_tre_col ]] && c_corr=-1 || c_corr=0; \
                    if [[ $c -eq 1 ]];then \
                      [[ \"${col_content/\\*}\" = \"$col_content\" ]] && [[ $l -eq 1 ]] && l=$n; \
                      count=$(wc -L <<< \"${graph_line[$i]}\"); \
                      whitespaces=$(seq -s\" \" $((${col_length[\"1:1\"]}-$count))|tr -d \"[:digit:]\"); \
                      col_content[$git_tre_col]=\"${col_content}$whitespaces\"; \
                    else \
                      col_content[$c+$c_corr]=\"$(printf \"%-${col_length[\"$l:$c\"]}s\" \"${col_content:-\"\"}\")\"; \
                    fi; \
                  done <<< \"$line$delim\"; \
                  for ((k=$c+1;k<=$i_max;k++));do \
                    [[ $k -le $git_tre_col ]] && c_corr=-1 || c_corr=0; \
                    col_content[$k+$c_corr]=\"$(printf \"%-${col_length[\"$l:$k\"]:-${col_length[\"${last[$k]:-1}:$k\"]:-0}}s\" \"\")\"; \
                  done; \
                  unset col_content[0]; \
                  echo -e \"${col_content[*]}\"; \
                  unset col_content[*]; \
                done < <(eval git \"$git_log_cmd\" && echo); \
                "' "git-tably"
    l1       = log --all --graph --color --pretty=format:'^%<(7,trunc)%h^%C(white)%<(15,trunc)- %ar -%C(reset)^%<(35,trunc)%s^%C(white)%an%C(reset)'
    l2       = log --all --graph --color --pretty=format:'%D^%<(7,trunc)%h^%<(35,trunc)%s^%C(white)%<(20,trunc)%an%C(reset)^%C(white) (%ar)%C(reset)'
    l2-col   = 2
    l3       = log --all --graph --color --pretty=format:'%<(7,trunc)%h%d^%<(11,trunc)%cs%C(reset)^%s%n^%C(white)%<(11,trunc)%cr%C(reset)^%C(white)%<(25,trunc)From %an%C(reset)^%C(white)%ae%C(reset)%n'
    l3-col   = 2
    l4       = log --all --graph --color --pretty=format:'%h^%C(white)%<(25,trunc)%an%C(reset)^%C(white)%<(31,trunc)%aD%C(reset)^%s%n^%C(dim white)%<(25,trunc)%ae%C(reset)^%>(31,trunc)%D%C(reset)%n'
    l4-col   = 3

    ; Define your whitespace seperated tree color list
    color-list = "1;38;5;222 1;38;5;69 1;38;5;250 1;38;5;70 1;31 1;38;5;93 1;33 2;38;5;11 1;38;5;48 1;35 1;32 1;38;5;111 1;38;5;160 1;38;5;130 1;36 38;5;21"
    # This is the Bash snippet which does all the magic
    color = !bash -c '" \
      \
      \
      declare -A col_length col_colored; \
      apost=$(echo -e \"\\u0027\"); \
      delim=$(git config alias.delim); \
      git_log_cmd=$(git config alias.$1); \
      graph_col=${2:-$(git config alias.$1-col)}; \
      color_list=( $(git config alias.color-list) ); \
      [[ -z \"$graph_col\" ]] && graph_col=1; \
      [[ -z \"$git_log_cmd\" ]] && { git $1;exit; }; \
      \
      \
      i=0; \
      n=0; \
      while IFS= read -r line; do \
        ((n++)); \
        while read -d\"$delim\" -r col_info;do \
          ((i++)); \
          [[ -z \"$col_info\" ]] && col_length[\"$n:$i\"]=${col_length[\"${last[$i]:-1}:$i\"]} && ((i--)) && continue; \
          [[ $i -gt ${i_max:-0} ]] && i_max=$i; \
          [[ \"${col_info:1:1}\" = \"C\" ]] && col_colored[\"$n:$i\"]=1; \
          col_length[\"$n:$i\"]=$(grep -Eo \"\\([0-9]*,[lm]*trunc\\)\" <<< \"$col_info\" | grep -Eo \"[0-9]*\" | head -n 1); \
          [[ -n \"${col_length[\"$n:$i\"]}\" ]] && last[$i]=$n; \
          chars_extra=$(grep -Eo \"\\trunc\\).*\" <<< \"$col_info\"); \
          chars_extra=${chars_extra#trunc)}; \
          chars_begin=${chars_extra%%\\%*}; \
          chars_extra=${chars_extra%$apost*}; \
          chars_extra=${chars_extra#*\\%}; \
          case \" ad aD ae aE ai aI al aL an aN ar as at b B cd cD ce cE ci cI cl cL cn cN cr \
                  cs ct d D e f G? gd gD ge gE GF GG GK gn gN GP gs GS GT h H N p P s S t T \" in \
            *\" ${chars_extra:0:2} \"*) \
              chars_extra=${chars_extra:2}; \
              chars_after=${chars_extra%%\\%*}; \
              ;; \
            *\" ${chars_extra:0:1} \"*) \
              chars_extra=${chars_extra:1}; \
              chars_after=${chars_extra%%\\%*}; \
              ;; \
            *) \
              echo \"No Placeholder found. Probably no table-like output.\"; \
              continue; \
              ;; \
          esac; \
          if [[ -n \"$chars_begin$chars_after\" ]];then \
            len_extra=$(echo \"$chars_begin$chars_after\" | wc -m); \
            col_length[\"$n:$i\"]=$((${col_length[\"$n:$i\"]}+$len_extra-1)); \
          fi; \
        done <<< \"${line#*=format:}$delim\"; \
        i=1; \
      done <<< \"$(echo -e \"${git_log_cmd//\\%n/\\\\n}\")\"; \
      \
      \
      git_log_fst_part=\"${git_log_cmd%%\"$apost\"*}\"; \
      git_log_lst_part=\"${git_log_cmd##*\"$apost\"}\"; \
      git_log_tre_part=\"${git_log_cmd%%\"$delim\"*}\"; \
      git_log_tre_part=\"${git_log_tre_part##*\"$apost\"}\"; \
      git_log_cmd_count=\"$git_log_fst_part$apost $git_log_tre_part$apost$git_log_lst_part\"; \
      col_length[\"1:1\"]=$(eval git \"${git_log_cmd_count// --color}\" | wc -L); \
      \
      \
      i=0; \
      while IFS=\"$delim\" read -r graph rest;do \
        ((i++)); \
        graph_line[$i]=\"$graph\"; \
      done < <(eval git \"${git_log_cmd/ --color}\" && echo); \
      \
      \
      i=0; \
      l=0; \
      msg_err=; \
      color_list_ind=-1; \
      color_list_num=${#color_list[*]}; \
      color_repeat_ind=1; \
      if [[ $color_list_num -eq 0 ]];then \
        echo \"No tree colors specified via color-list under section [alias] in your .gitconfig\"; \
        echo \"Therefore collecting available Git colors, which may take a while ...\"; \
        while read -d\"[\" -r char;do \
          color=$(sed -nl99 \"l\" <<< \"$char\"); \
          case \"$color\" in \
            *\"m\"*) \
              color=${color%%m*}; \
              ;; \
            *) \
              continue; \
              ;; \
          esac; \
          case \" $color_list \" in \
            *\" $color \"*) \
              continue; \
              ;; \
            *) \
              color_list=\"$color_list$color \"; \
              ;; \
          esac; \
        done <<< \"$(git log --all --color --graph --pretty=format:)\"; \
        echo -e \"Temporary used color-list = \\\"${color_list% }\\\"\\n\"; \
        color_list=( ${color_list% } ); \
        color_list_num=${#color_list[*]}; \
      fi; \
      while IFS= read -r line;do \
        ((i++)); \
        j=-1; \
        case_off=; \
        graph_colored=; \
        graph_line_last=\"${graph_line[$i-1]}\"; \
        graph_line=\"${graph_line[$i]}\"; \
        graph_line_next=\"${graph_line[$i+1]}\"; \
        while IFS= read -r char;do \
          ((j++)); \
          case \"$case_off$char\" in \
            [^\\ \\_\\*\\/\\|\\\\]|\"case_off\"*) \
              graph_colored=\"${graph_colored}\\033[${point_color}m$char\\033[0m\"; \
              case_off=\"case_off\"; \
              ;; \
            \" \") \
              graph_colored=\"${graph_colored}$char\"; \
              case \"$char_last\" in \
                \" \") \
                  unset color_ind[$j]; \
                  ;; \
              esac; \
              ;; \
            \"*\") \
              case \"${graph_line_last:$j:1}\" in \
                \"*\") \
                  :; \
                  ;; \
                \"|\") \
                  case \"${graph_line_last:$(($j-1)):1}\" in \
                    \"\\\\\") \
                      color_ind[$j]=${color_ind_last[$j-1]:-${color_ind[$j-1]}}; \
                      ;; \
                    *) \
                      :; \
                      ;; \
                  esac; \
                  ;; \
                \" \") \
                  case \"${graph_line_last:$(($j-1)):1}\" in \
                    \"\\\\\") \
                      color_ind[$j]=${color_ind_last[$j-1]:-${color_ind[$j-1]}}; \
                      ;; \
                    \"/\") \
                      case \"${graph_line_last:$(($j+1)):1}\" in \
                        \"/\") \
                          color_ind[$j]=${color_ind[$j+1]}; \
                          ;; \
                        \" \") \
                          new_col_ind=${#color[*]}; \
                          while true;do \
                            ((color_list_ind++)); \
                            [[ $color_list_ind -ge $color_list_num ]] && color_list_ind=$color_repeat_ind; \
                            [[ $color_list_ind -ge $color_list_num ]] && break; \
                            new_color=${color_list[$color_list_ind]}; \
                            case \"$new_color\" in \
                              \"\"|[\\ ]*) \
                                continue; \
                                ;; \
                              \"${color[${color_ind[$j-1]}]}\") \
                                [[ $(($color_list_num-$color_repeat_ind)) -gt 1 ]] && continue; \
                                ;;& \
                              *) \
                                color[$new_col_ind]=$new_color; \
                                color_ind[$j]=$new_col_ind; \
                                last_new_colored_line=$i; \
                                break; \
                                ;; \
                            esac 2>/dev/null; \
                          done; \
                          ;; \
                        *) \
                          [[ -n \"$msg_err\" ]] && echo -e \"Unknown case in graph_line $i: $graph_line for char $char at position $j\nwith the former graph_line $(($i-1)): $graph_line_last\"; \
                          ;; \
                      esac; \
                      ;; \
                    \" \") \
                      case \"${graph_line_last:$(($j+1)):1}\" in \
                        \"/\") \
                          color_ind[$j]=${color_ind[$j+1]}; \
                          ;; \
                        *) \
                          new_col_ind=${#color[*]}; \
                          while true;do \
                            ((color_list_ind++)); \
                            [[ $color_list_ind -ge $color_list_num ]] && color_list_ind=$color_repeat_ind; \
                            [[ $color_list_ind -ge $color_list_num ]] && break; \
                            new_color=${color_list[$color_list_ind]}; \
                            case \"$new_color\" in \
                              \"\"|[\\ ]*) \
                                continue; \
                                ;; \
                              \"${color[${color_ind[$j-1]}]}\") \
                                [[ $(($color_list_num-$color_repeat_ind)) -gt 1 ]] && continue; \
                                ;;& \
                              *) \
                                color[$new_col_ind]=$new_color; \
                                color_ind[$j]=$new_col_ind; \
                                last_new_colored_line=$i; \
                                break; \
                                ;; \
                            esac 2>/dev/null; \
                          done; \
                          ;; \
                      esac; \
                      ;; \
                    *) \
                      [[ -n \"$msg_err\" ]] && echo -e \"Unknown case in graph_line $i: $graph_line for char $char at position $j\nwith the former graph_line $(($i-1)): $graph_line_last\"; \
                      ;; \
                  esac; \
                  ;; \
                \"\"|[^\\ \\_\\*\\/\\|\\\\]) \
                  new_col_ind=${#color[*]}; \
                  while true;do \
                    ((color_list_ind++)); \
                    [[ $color_list_ind -ge $color_list_num ]] && color_list_ind=$color_repeat_ind; \
                    [[ $color_list_ind -ge $color_list_num ]] && break; \
                    new_color=${color_list[$color_list_ind]}; \
                    case \"$new_color\" in \
                      \"\"|[\\ ]*) \
                        continue; \
                        ;; \
                      \"${color[${color_ind[$j-1]}]}\") \
                        [[ $(($color_list_num-$color_repeat_ind)) -gt 1 ]] && continue; \
                        ;;& \
                      *) \
                        color[$new_col_ind]=$new_color; \
                        color_ind[$j]=$new_col_ind; \
                        last_new_colored_line=$i; \
                        break; \
                        ;; \
                    esac 2>/dev/null; \
                  done; \
                  ;; \
                *) \
                  [[ -n \"$msg_err\" ]] && echo -e \"Unknown case in graph_line $i: $graph_line for char $char at position $j\nwith the former graph_line $(($i-1)): $graph_line_last\"; \
                  ;; \
              esac; \
              graph_colored=\"${graph_colored}\\033[${color[${color_ind[$j]}]}m$char\\033[0m\"; \
              point_color=${color[${color_ind[$j]}]}; \
              ;; \
            \"|\") \
              case \"${graph_line_last:$j:1}\" in \
                \" \") \
                  case \"${graph_line_last:$(($j-1)):1}\" in \
                    \"/\") \
                      color_ind[$j]=${color_ind[$j+1]}; \
                      ;; \
                    \"\\\\\") \
                      color_ind[$j]=${color_ind_last[$j-1]:-${color_ind[$j-1]}}; \
                      ;; \
                    *) \
                      case \"${graph_line_last:$(($j+1)):1}\" in \
                        \"/\") \
                          color_ind[$j]=${color_ind[$j+1]}; \
                          ;; \
                        *) \
                          [[ -n \"$msg_err\" ]] && echo -e \"Unknown case in graph_line $i: $graph_line for char $char at position $j\nwith the former graph_line $(($i-1)): $graph_line_last\"; \
                          ;; \
                      esac; \
                      ;; \
                  esac; \
                  ;; \
                \"|\") \
                  case \"${graph_line_last:$(($j-1)):1}\" in \
                    \"\\\\\") \
                      case \"${graph_line:$(($j+1)):1}\" in \
                        \"\\\\\") \
                           :; \
                           ;; \
                        \" \") \
                          color_ind[$j]=${color_ind_last[$j-1]}; \
                          ;; \
                        *) \
                          [[ -n \"$msg_err\" ]] && echo -e \"Unknown case in graph_line $i: $graph_line for char $char at position $j\nwith the former graph_line $(($i-1)): $graph_line_last\"; \
                          ;; \
                      esac; \
                      ;; \
                    *) \
                      :; \
                      ;; \
                  esac; \
                  ;; \
                \"*\") \
                  case \"${graph_line:$(($j-1)):1}\" in \
                    \"/\") \
                      if [[ $last_new_colored_line -eq $(($i-1)) ]];then \
                        new_col_ind=${#color[*]}; \
                        while true;do \
                          ((color_list_ind++)); \
                          [[ $color_list_ind -ge $color_list_num ]] && color_list_ind=$color_repeat_ind; \
                          [[ $color_list_ind -ge $color_list_num ]] && break; \
                          new_color=${color_list[$color_list_ind]}; \
                          case \"$new_color\" in \
                            \"\"|[\\ ]*) \
                              continue; \
                              ;; \
                            \"${color[${color_ind[$j-1]}]}\") \
                              [[ $(($color_list_num-$color_repeat_ind)) -gt 1 ]] && continue; \
                              ;;& \
                            *) \
                              color[$new_col_ind]=$new_color; \
                              color_ind[$j]=$new_col_ind; \
                              break; \
                              ;; \
                          esac 2>/dev/null; \
                        done; \
                      else \
                        color_ind[$j]=${color_ind_last[$j]}; \
                      fi; \
                      ;; \
                    *) \
                      :; \
                      ;; \
                  esac; \
                  ;; \
                \"/\") \
                  color_ind[$j]=${color_ind[$j]}; \
                  ;; \
                *) \
                  [[ -n \"$msg_err\" ]] && echo -e \"Unknown case in graph_line $i: $graph_line for char $char at position $j\nwith the former graph_line $(($i-1)): $graph_line_last\"; \
                  ;; \
              esac; \
              graph_colored=\"${graph_colored}\\033[${color[${color_ind[$j]}]}m$char\\033[0m\"; \
              ;; \
            \"/\") \
              case \"${graph_line_last:$(($j)):1}\" in \
                \"|\") \
                  case \"${graph_line_last:$(($j+1)):1}\" in \
                    \"/\") \
                      case \"${graph_line_next:$j:1}\" in \
                        \"|\") \
                          color_ind[$j]=${color_ind[$j+1]}; \
                          ;; \
                        \" \") \
                          color_ind[$j]=${color_ind[$j]}; \
                          ;; \
                        *) \
                          [[ -n \"$msg_err\" ]] && echo -e \"Unknown case in graph_line $i: $graph_line for char $char at position $j\nwith the former graph_line $(($i-1)): $graph_line_last\"; \
                          ;; \
                      esac; \
                      ;; \
                    *) \
                      color_ind[$j]=${color_ind[$j]}; \
                      ;; \
                  esac; \
                  ;; \
                *) \
                  case \"${graph_line_last:$(($j+2)):1}\" in \
                    \"/\"|\"_\") \
                      color_ind[$j]=${color_ind[$j+2]}; \
                      ;; \
                    *) \
                      case \"${graph_line_last:$(($j+1)):1}\" in \
                        \"/\"|\"_\"|\"|\") \
                          color_ind[$j]=${color_ind[$j+1]}; \
                          ;; \
                        \"*\") \
                          case \"${graph_line:$(($j+1)):1}\" in \
                            \"|\") \
                              if [[ $last_new_colored_line -eq $(($i-1)) ]];then \
                                color_ind[$j]=${color_ind_last[$j+1]}; \
                              else \
                                new_col_ind=${#color[*]}; \
                                while true;do \
                                  ((color_list_ind++)); \
                                  [[ $color_list_ind -ge $color_list_num ]] && color_list_ind=$color_repeat_ind; \
                                  [[ $color_list_ind -ge $color_list_num ]] && break; \
                                  new_color=${color_list[$color_list_ind]}; \
                                  case \"$new_color\" in \
                                    \"\"|[\\ ]*) \
                                      continue; \
                                      ;; \
                                    \"${color[${color_ind[$j-1]}]}\") \
                                      [[ $(($color_list_num-$color_repeat_ind)) -gt 1 ]] && continue; \
                                      ;;& \
                                    *) \
                                      color[$new_col_ind]=$new_color; \
                                      color_ind[$j]=$new_col_ind; \
                                      break; \
                                      ;; \
                                  esac 2>/dev/null; \
                                done; \
                              fi; \
                              ;; \
                            *) \
                              color_ind[$j]=${color_ind_last[$j+1]}; \
                              ;; \
                          esac; \
                          ;; \
                        *) \
                          case \"${graph_line_last:$j:1}\" in \
                            \"\\\\\") \
                              :; \
                              ;; \
                            \" \") \
                              case \"${graph_line_last:$(($j+1)):1}\" in \
                                \"*\") \
                                  color_ind[$j]=${color_ind[$j+1]}; \
                                  ;; \
                                *) \
                                  [[ -n \"$msg_err\" ]] && echo -e \"Unknown case in graph_line $i: $graph_line for char $char at position $j\nwith the former graph_line $(($i-1)): $graph_line_last\"; \
                                  ;; \
                              esac; \
                              ;; \
                            *) \
                              [[ -n \"$msg_err\" ]] && echo -e \"Unknown case in graph_line $i: $graph_line for char $char at position $j\nwith the former graph_line $(($i-1)): $graph_line_last\"; \
                              ;; \
                          esac; \
                          ;; \
                      esac; \
                      ;; \
                  esac; \
                  ;; \
              esac; \
              graph_colored=\"${graph_colored}\\033[${color[${color_ind[$j]}]}m$char\\033[0m\"; \
              ;; \
            \"\\\\\") \
              case \"${graph_line_last:$(($j-1)):1}\" in \
                \"|\"|\"\\\\\") \
                  color_ind[$j]=${color_ind_last[$j-1]:-${color_ind[$j-1]}}; \
                  ;; \
                \"*\") \
                  new_col_ind=${#color[*]}; \
                  while true;do \
                    ((color_list_ind++)); \
                    [[ $color_list_ind -ge $color_list_num ]] && color_list_ind=$color_repeat_ind; \
                    [[ $color_list_ind -ge $color_list_num ]] && break; \
                    new_color=${color_list[$color_list_ind]}; \
                    case \"$new_color\" in \
                      \"\"|[\\ ]*) \
                        continue; \
                        ;; \
                      \"${color[${color_ind[$j-1]}]}\") \
                        [[ $(($color_list_num-$color_repeat_ind)) -gt 1 ]] && continue; \
                        ;;& \
                      *) \
                        color[$new_col_ind]=$new_color; \
                        color_ind[$j]=$new_col_ind; \
                        break; \
                        ;; \
                    esac 2>/dev/null; \
                  done; \
                  ;; \
                \" \") \
                  case \"${graph_line_last:$(($j-2)):1}\" in \
                    \"\\\\\"|\"_\") \
                      color_ind[$j]=${color_ind_last[$j-2]:-${color_ind[$j-2]}}; \
                      ;; \
                    *) \
                      case \"${graph_line_last:$j:1}\" in \
                        \"|\") \
                          color_ind[$j]=${color_ind_last[$j]:-${color_ind[$j]}}; \
                          ;; \
                        *) \
                          [[ -n \"$msg_err\" ]] && echo -e \"Unknown case in graph_line $i: $graph_line for char $char at position $j\nwith the former graph_line $(($i-1)): $graph_line_last\"; \
                          ;; \
                      esac; \
                      ;; \
                  esac; \
                  ;; \
                *) \
                  [[ -n \"$msg_err\" ]] && echo -e \"Unknown case in graph_line $i: $graph_line for char $char at position $j\nwith the former graph_line $(($i-1)): $graph_line_last\"; \
                  ;; \
              esac; \
              graph_colored=\"${graph_colored}\\033[${color[${color_ind[$j]}]}m$char$char\\033[0m\"; \
              ;; \
            \"_\") \
              case \"${graph_line:$(($j-2)):1}\" in \
                \"\\\\\"|\"_\") \
                  color_ind[$j]=${color_ind[$j-2]}; \
                  ;; \
                \" \"|\"/\") \
                  k=2; \
                  while [[ \"${graph_line:$(($j+$k)):1}\" = \"_\" ]];do \
                    k=$(($k+2)); \
                  done; \
                  case \"${graph_line:$(($j+$k)):1}\" in \
                    \"/\") \
                      case \"${graph_line_last:$(($j+$k+1)):1}\" in \
                        \"*\") \
                          color_ind[$j]=${color_ind[$j+$k+1]}; \
                          ;; \
                        \" \") \
                          case \"${graph_line_last:$(($j+$k)):1}\" in \
                            \"\\\\\") \
                              color_ind[$j]=${color_ind[$j+$k]}; \
                              ;; \
                            *) \
                              [[ -n \"$msg_err\" ]] && echo -e \"Unknown case in graph_line $i: $graph_line for char $char at position $j\nwith the former graph_line $(($i-1)): $graph_line_last\"; \
                              ;; \
                          esac; \
                          ;; \
                        \"|\") \
                          case \"${graph_line:$(($j+$k+1)):1}\" in \
                            \"|\") \
                              color_ind[$j]=${color_ind[$j+$k+2]}; \
                              ;; \
                            \" \") \
                              color_ind[$j]=${color_ind[$j+$k+1]}; \
                              ;; \
                            *) \
                              [[ -n \"$msg_err\" ]] && echo -e \"Unknown case in graph_line $i: $graph_line for char $char at position $j\nwith the former graph_line $(($i-1)): $graph_line_last\"; \
                              ;; \
                          esac; \
                          ;; \
                        *) \
                          [[ -n \"$msg_err\" ]] && echo -e \"Unknown case in graph_line $i: $graph_line for char $char at position $j\nwith the former graph_line $(($i-1)): $graph_line_last\"; \
                          ;; \
                      esac; \
                      ;; \
                    *) \
                      [[ -n \"$msg_err\" ]] && echo -e \"Unknown case in graph_line $i: $graph_line for char $char at position $j\nwith the former graph_line $(($i-1)): $graph_line_last\"; \
                      ;; \
                  esac; \
                  ;; \
                *) \
                  [[ -n \"$msg_err\" ]] && echo -e \"Unknown case in graph_line $i: $graph_line for char $char at position $j\nwith the former graph_line $(($i-1)): $graph_line_last\"; \
                  ;; \
              esac; \
              graph_colored=\"${graph_colored}\\033[${color[${color_ind[$j]}]}m$char\\033[0m\"; \
              ;; \
          esac; \
          char_last=$char; \
        done <<< \"$(grep -Eo \".\" <<< \"${graph_line%%$delim*}\")\"; \
        for key in ${!color_ind[*]};do \
          color_ind_last[$key]=${color_ind[$key]}; \
        done; \
        \
        \
        c=0; \
        ((l++)); \
        [[ $l -gt $n ]] && l=1; \
        while IFS= read -d\"$delim\" -r col_content;do \
          ((c++)); \
          [[ $c -le $graph_col ]] && c_corr=-1 || c_corr=0; \
          if [[ $c -eq 1 ]];then \
            [[ \"${col_content/\\*}\" = \"$col_content\" ]] && [[ $l -eq 1 ]] && l=$n; \
            whitespaces=$(seq -s\" \" $((${col_length[\"1:1\"]}-$j))|tr -d \"[:digit:]\"); \
            col_content[$graph_col]=\"${graph_colored}$whitespaces\"; \
          elif [[ ${col_colored[\"$l:$c\"]:-0} -eq 0 ]];then \
            col_content[$c+$c_corr]=\"\\033[${point_color:-0}m$(printf \"%-${col_length[\"$l:$c\"]}s\" \"${col_content:-\"\"}\")\\033[0m\"; \
          else \
            col_content[$c+$c_corr]=\"$(printf \"%-${col_length[\"$l:$c\"]}s\" \"${col_content:-\"\"}\")\"; \
          fi; \
        done <<< \"$line$delim\"; \
        for ((k=$c+1;k<=$i_max;k++));do \
          [[ $k -le $graph_col ]] && c_corr=-1 || c_corr=0; \
          col_content[$k+$c_corr]=\"$(printf \"%-${col_length[\"$l:$k\"]:-${col_length[\"${last[$k]:-1}:$k\"]:-0}}s\" \"\")\"; \
        done; \
        unset col_content[0]; \
        echo -e \"${col_content[*]}\"; \
        unset col_content[*]; \
      done < <(git $1 && echo); \
      "' "git-colored"

	; browse = "!$PROGRAMS_PATH/dotfiles/gitbrowse.sh"
[color "decorate"]
    HEAD = bold blink italic 196
    branch = 214
    tag = bold 222
[http]
	postBuffer = 157286400
[log]
    graphColors = bold 160, blink 231 bold 239, bold 166, bold black 214, bold green, bold 24, cyan
    date = relative
    decorate = true
    reverse = true
;     graphColors = true
;     all = true
;     decorate = true
;     graphColors = true
;     oneline = false
[format]
    pretty = %C(dim cyan)%>(12,trunc)%ad  %C(auto,yellow)%h %C(auto,green)%<(9,trunc)%aN%C(auto,reset)%s%C(auto,red)% gD% D
    ; pretty = %C(yellow)%h %C(cyan)%cd %Cblue%aN%C(auto)%d %Creset%s
[pager]
	branch = false
[gpg]
	program = gpg2
